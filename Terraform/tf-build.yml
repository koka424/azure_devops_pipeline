name: $(Date:yyyyMMdd)$(Rev:.r)
stages:
- stage: Build
  jobs:
    - job: Build
      displayName: Terraform-CI
      pool:
        name: Hosted VS2017
        vmImage: 'Ubuntu-16.04'
      variables:
        System.Debug: True
      steps:
      - task: CopyFiles@2
        displayName: 'Copy Terraform files to artifacts'
        inputs:
          SourceFolder: Terraform
          contents: '*.tf'
          TargetFolder: '$(build.artifactstagingdirectory)/Terraform'

      - task: PublishPipelineArtifact@0
        displayName: 'Publish Artifact'
        inputs:
          targetPath: '$(build.artifactstagingdirectory)'
          artifactName: 'drop'
- stage: Deploy
  dependsOn: Build
  jobs:
    - deployment: 'TF_CI'
      displayName: 'Terraform-CI'
      pool:
        name: Hosted VS2017
        vmImage: 'Ubuntu-16.04'
      environment: 'dev'
      variables:
        System.Debug: True
        terraformstoragerg: 'terraformrg'
        terraformstorageaccount: 'terraformstoraged74fad4d'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadPipelineArtifact@2
              displayName: 'Download Artifacts'
              inputs:
                artifact: 'drop'
            - task: AzureCLI@1
              displayName: 'Azure CLI to deploy required Azure resources'
              inputs:
                azureSubscription: 'Free Trial (af56a43c-3ecb-4d76-96ec-93b1f016f1cd)'
                scriptLocation: inlineScript
                inlineScript: |
                  # the following script will create Azure resource group, Storage account and a Storage container which will be used to store terraform state
                  call az group create --location westus --name $(terraformstoragerg)

                  call az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location westus --sku Standard_LRS

                  call az storage container create --name terraform --account-name $(terraformstorageaccount)

            - task: AzurePowerShell@3
              displayName: 'Azure PowerShell script to get the storage key'
              inputs:
                azureSubscription: 'Free Trial (af56a43c-3ecb-4d76-96ec-93b1f016f1cd)'
                scriptType: InlineScript
                azurePowerShellVersion: latestVersion
                Inline: |
                  # Using this script we will fetch storage key which is required in terraform file to authenticate backend stoarge account

                  $key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]

                  Write-Host "##vso[task.setvariable variable=storagekey]$key"
            - task: qetza.replacetokens.replacetokens-task.replacetokens@3
              displayName: 'Replace tokens in terraform file'
              inputs:
                targetFiles: '**/*.tf'
                tokenPrefix: '__'
                tokenSuffix: '__'
            - task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform.Xpirit-Vsts-Release-Terraform.Terraform@2
              displayName: 'Terraform init'
              inputs:
                TemplatePath: '$(Pipeline.Workspace)/drop/Terraform'
                Arguments: init
                InstallTerraform: true
                UseAzureSub: true
                ConnectedServiceNameARM: 'Free Trial (af56a43c-3ecb-4d76-96ec-93b1f016f1cd)'
            - task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform.Xpirit-Vsts-Release-Terraform.Terraform@2
              displayName: 'Terraform plan'
              inputs:
                TemplatePath: '$(Pipeline.Workspace)/drop/Terraform'
                Arguments: plan
                InstallTerraform: true
                UseAzureSub: true
                ConnectedServiceNameARM: 'Free Trial (af56a43c-3ecb-4d76-96ec-93b1f016f1cd)'
            - task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform.Xpirit-Vsts-Release-Terraform.Terraform@2
              displayName: 'Terraform apply -auto-approve'
              inputs:
                TemplatePath: '$(Pipeline.Workspace)/drop/Terraform'
                Arguments: 'apply -auto-approve'
                InstallTerraform: true
                UseAzureSub: true
                ConnectedServiceNameARM: 'Free Trial (af56a43c-3ecb-4d76-96ec-93b1f016f1cd)'