$schema: 'https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#'
contentVersion: 1.0.0.0
parameters:
  resourceGroup:
    type: string
    defaultValue: '[resourceGroup().name]'
    metadata:
      description: The resource group being deployed to.
  location:
    type: string
    defaultValue: '[resourceGroup().location]'
    metadata:
      description: The location/region where the virtual network is created. Changing this forces a new resource to be created.
  env:
    type: string
    metadata:
      description: The environment the deployment belongs to.
  app:
    type: string
    metadata:
      description: The application the deployment is part of.
  service:
    type: string
    metadata:
      description: The name of the service to be deployed.
  vnetAddressSpace:
    type: object
    metadata:
      description: The address space of the VNET to use for this deployment.
  frontendSubnetPrefix:
    type: string
    metadata:
      description: The address prefix of the frontend subnet.
  backendSubnetPrefix:
    type: string
    metadata:
      description: The address prefix of the backend subnet.
  applicationGatewaySku:
    type: object
    defaultValue:
      name: Standard_Small
      tier: Standard
      capacity: 2
    metadata:
      description: 'A hash defining the name, tier, and capacity of the SKU.'
  vmssSku:
    type: object
    defaultValue:
      name: Standard_B1s
      tier: Standard
      capacity: 2
    metadata:
      description: 'A hash defining the name, tier, and capacity of the SKU.'
  vmssStorageProfileImageReference:
    type: object
    defaultValue:
      publisher: Canonical
      offer: UbuntuServer
      sku: 16.04-LTS
      version: latest
    metadata:
      description: 'A hash defining the name, offer, sku, and version of the image for the VMSS.'
  principalId:
    type: string
    metadata:
      description: The principal to assign the role to
  builtInRoleType:
    type: string
    allowedValues:
      - Owner
      - Contributor
      - Reader
    metadata:
      description: Built-in role to assign
  roleNameGuid:
    type: string
    defaultValue: '[newGuid()]'
    metadata:
      description: A new GUID used to identify the role assignment
variables:
  vnet: "[concat(parameters('resourceGroup'), '-', parameters('location'), '-network')]"
  roleAssignmentsTemplateUri: 'https://raw.githubusercontent.com/koka424/azure_devops_pipeline/master/ARMTemplate/templates/vnet.json'
  frontendSubnet: "[concat(variables('vnet'), '-subnet-frontend')]"
  backendSubnet: "[concat(variables('vnet'), '-subnet-backend')]"
  lbPublicIp: "[concat(variables('vnet'), '-lb-public-ip')]"
  applicationGateway: "[concat(parameters('resourceGroup'), '-agw')]"
  vmss: "[concat(parameters('resourceGroup'), '-vmss')]"
  backendAddressPoolName: "[concat(variables('vnet'), '-beap')]"
  frontendPortName: "[concat(variables('vnet'), '-feport')]"
  frontendIpConfigurationName: "[concat(variables('vnet'), '-feip')]"
  httpSettingName: "[concat(variables('vnet'), '-be-htst')]"
  listenerName: "[concat(variables('vnet'), '-httplstn')]"
  requestRoutingRuleName: "[concat(variables('vnet'), '-rqrt')]"
  redirectConfigurationName: "[concat(variables('vnet'), '-rdrcfg')]"
  commonTags:
    env: "{{ env }}"
    app: "{{ app }}"
    service: "{{ service }}"
    location: "{{ location }}"
functions: []
resources:
  - type: Microsoft.Resources/deployments
    name: roleAssignmentsTemplate
    apiVersion: '2016-09-01'
    properties:
      mode: Incremental
      templateLink:
        uri: "[variables('roleAssignmentsTemplateUri')]"
        contentVersion: 1.0.0.0
      parameters:
        principalId:
          value: "[parameters('principalId')]"
        builtInRoleType:
          value: "[parameters('builtInRoleType')]"
  - {{ vnet }}
  - type: Microsoft.Network/publicIPAddresses
    apiVersion: '2019-04-01'
    name: "[variables('lbPublicIp')]"
    location: "[parameters('location')]"
    sku:
      name: Basic
      tier: Regional
    properties:
      publicIPAllocationMethod: Dynamic
      publicIPAddressVersion: IPv4
  - type: Microsoft.Network/publicIPAddresses
    apiVersion: '2019-04-01'
    name: test-arm-rg-dev-jumpbox-ip
    location: "[parameters('location')]"
    sku:
      name: Basic
      tier: Regional
    properties:
      publicIPAllocationMethod: Dynamic
      publicIPAddressVersion: IPv4
  - type: Microsoft.Network/networkSecurityGroups
    apiVersion: '2019-04-01'
    name: test-arm-rg-dev-jumpbox-sg
    location: "[parameters('location')]"
    properties:
      securityRules:
        - name: test-arm-rg-dev-jumpbox-sg-ssh
          properties:
            description: Allow inbound SSH connections
            protocol: Tcp
            sourceAddressPrefix: '*'
            sourcePortRange: '*'
            destinationPortRange: '22'
            destinationAddressPrefix: '*'
            priority: 1001
            access: Allow
            direction: Inbound
  - type: Microsoft.Network/networkInterfaces
    apiVersion: '2019-04-01'
    name: test-arm-rg-dev-jumpbox-nic
    location: "[parameters('location')]"
    dependsOn:
      - "[resourceId('Microsoft.Network/publicIPAddresses', 'test-arm-rg-dev-jumpbox-ip')]"
      - "[resourceId('Microsoft.Resources/deployments', variables('vnetTemplate'))]"
      - "[resourceId('Microsoft.Network/networkSecurityGroups', 'test-arm-rg-dev-jumpbox-sg')]"
    properties:
      ipConfigurations:
        - name: test-arm-rg-dev-jumpbox-nic-conf
          properties:
            privateIPAllocationMethod: Dynamic
            publicIPAddress:
              id: "[resourceId('Microsoft.Network/publicIPAddresses', 'test-arm-rg-dev-jumpbox-ip')]"
            subnet:
              id: "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet'), variables('backendSubnet'))]"
      networkSecurityGroup:
        id: "[resourceId('Microsoft.Network/networkSecurityGroups', 'test-arm-rg-dev-jumpbox-sg')]"
  - type: Microsoft.Compute/virtualMachines
    apiVersion: '2019-03-01'
    name: test-arm-rg-dev-jumpbox-vm
    location: "[parameters('location')]"
    dependsOn:
      - "[resourceId('Microsoft.Network/networkInterfaces', 'test-arm-rg-dev-jumpbox-nic')]"
    properties:
      hardwareProfile:
        vmSize: Standard_DS1_v2
      storageProfile:
        imageReference:
          publisher: Canonical
          offer: UbuntuServer
          sku: 16.04-LTS
          version: latest
        osDisk:
          osType: Linux
          name: myOsDisk
          createOption: FromImage
          caching: ReadWrite
          writeAcceleratorEnabled: false
          managedDisk:
            storageAccountType: Premium_LRS
          diskSizeGB: 30
      osProfile:
        computerName: test-arm-rg-dev-jumpbox-vm
        adminUsername: plankton
        adminPassword: 'Password1234!'
        linuxConfiguration:
          disablePasswordAuthentication: false
          provisionVMAgent: true
      networkProfile:
        networkInterfaces:
          - id: "[resourceId('Microsoft.Network/networkInterfaces', 'test-arm-rg-dev-jumpbox-nic')]"
            properties:
              primary: false
  - type: Microsoft.Network/applicationGateways
    apiVersion: '2019-04-01'
    name: "[variables('applicationGateway')]"
    location: "[parameters('location')]"
    dependsOn:
      - "[resourceId('Microsoft.Resources/deployments', variables('vnetTemplate'))]"
      - "[resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIp'))]"
    properties:
      sku: "[parameters('applicationGatewaySku')]"
      gatewayIPConfigurations:
        - name: "[concat(variables('applicationGateway'), '-gw-ip-cfg')]"
          properties:
            subnet:
              id: "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet'), variables('frontendSubnet'))]"
      frontendIPConfigurations:
        - name: "[variables('frontendIpConfigurationName')]"
          properties:
            publicIPAddress:
              id: "[resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIp'))]"
      frontendPorts:
        - name: "[variables('frontendPortName')]"
          properties:
            port: 80
      backendAddressPools:
        - name: "[variables('backendAddressPoolName')]"
      backendHttpSettingsCollection:
        - name: "[variables('httpSettingName')]"
          properties:
            port: 80
            protocol: Http
            cookieBasedAffinity: Disabled
      httpListeners:
        - name: "[variables('listenerName')]"
          properties:
            frontendIPConfiguration:
              id: "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGateway')), concat('/frontendIPConfigurations/', variables('frontendIpConfigurationName')))]"
            frontendPort:
              id: "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGateway')), concat('/frontendPorts/', variables('frontendPortName')))]"
            protocol: Http
            SslCertificate: null
      requestRoutingRules:
        - name: "[variables('requestRoutingRuleName')]"
          properties:
            ruleType: Basic
            httpListener:
              id: "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGateway')), concat('/httpListeners/', variables('listenerName')))]"
            backendAddressPool:
              id: "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGateway')), concat('/backendAddressPools/', variables('backendAddressPoolName')))]"
            backendHttpSettings:
              id: "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGateway')), concat('/backendHttpSettingsCollection/', variables('httpSettingName')))]"
  - type: Microsoft.Compute/virtualMachineScaleSets
    apiVersion: '2019-03-01'
    name: "[variables('vmss')]"
    location: "[parameters('location')]"
    dependsOn:
      - "[resourceId('Microsoft.Resources/deployments', variables('vnetTemplate'))]"
      - "[resourceId('Microsoft.Network/applicationGateways', variables('applicationGateway'))]"
    sku: "[parameters('vmssSku')]"
    properties:
      singlePlacementGroup: true
      upgradePolicy:
        mode: Manual
        automaticOSUpgradePolicy:
          enableAutomaticOSUpgrade: false
          disableAutomaticRollback: false
      virtualMachineProfile:
        osProfile:
          computerNamePrefix: "[concat(variables('vmss'), '-vm')]"
          adminUsername: plankton
          adminPassword: 'Password1234!'
          linuxConfiguration:
            disablePasswordAuthentication: false
        storageProfile:
          osDisk:
            createOption: FromImage
            caching: ReadWrite
            managedDisk:
              storageAccountType: Premium_LRS
          imageReference: "[parameters('vmssStorageProfileImageReference')]"
          dataDisks:
            - lun: 0
              createOption: Empty
              caching: ReadWrite
              managedDisk:
                storageAccountType: Standard_LRS
              diskSizeGB: 10
        networkProfile:
          networkInterfaceConfigurations:
            - name: "[concat(variables('vmss'), '-nip')]"
              properties:
                primary: true
                ipConfigurations:
                  - name: "[concat(variables('vmss'), '-np-ipconfig')]"
                    properties:
                      subnet:
                        id: "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet'), variables('backendSubnet'))]"
                      applicationGatewayBackendAddressPools:
                        - id: "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGateway')), concat('/backendAddressPools/', variables('backendAddressPoolName')))]"
        extensionProfile:
          extensions:
            - name: CustomScript
              properties:
                autoUpgradeMinorVersion: true
                publisher: Microsoft.Azure.Extensions
                type: CustomScript
                typeHandlerVersion: '2.0'
                settings:
                  commandToExecute: ./install_nginx.sh
                  fileUris:
                    - 'https://raw.githubusercontent.com/Azure/azure-docs-powershell-samples/master/application-gateway/iis/install_nginx.sh'
      overprovision: true
      doNotRunExtensionsOnOverprovisionedVMs: false
outputs: {}
